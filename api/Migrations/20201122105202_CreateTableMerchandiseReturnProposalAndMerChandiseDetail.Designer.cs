// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201122105202_CreateTableMerchandiseReturnProposalAndMerChandiseDetail")]
    partial class CreateTableMerchandiseReturnProposalAndMerChandiseDetail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "b979036b-d165-4bea-b6b6-16b22a3f54dd",
                            ConcurrencyStamp = "577f1a38-7cf8-4345-ab56-a56334b2888a",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "78c5228f-f600-4545-abcd-f4cc21d18e4c",
                            ConcurrencyStamp = "895febff-3079-427f-9f66-b91feac9f72e",
                            Name = "Sale",
                            NormalizedName = "sale"
                        },
                        new
                        {
                            Id = "cc2a0eb3-8736-441d-9130-5b421db3ac0e",
                            ConcurrencyStamp = "42620f17-af5b-4511-bb22-b205224f5a68",
                            Name = "SuperAdmin",
                            NormalizedName = "superadmin"
                        },
                        new
                        {
                            Id = "6b30cb05-12f7-46c2-b95f-8d783c1f9eb1",
                            ConcurrencyStamp = "efc0825e-6f35-470c-9560-84b0ac0f7b0d",
                            Name = "WarehouseKeeperManager",
                            NormalizedName = "warehousekeepermanager"
                        },
                        new
                        {
                            Id = "6665ddaa-72f9-4f90-a6b1-43eb68dea610",
                            ConcurrencyStamp = "b6827032-764c-48eb-8c41-0f1b04d735e5",
                            Name = "WarehouseKeeper",
                            NormalizedName = "warehousekeeper"
                        },
                        new
                        {
                            Id = "423e498c-fc67-4853-ac4f-f3cd91d32e87",
                            ConcurrencyStamp = "228bac3a-9257-4ec3-bd74-fa1b3ead4128",
                            Name = "Customer",
                            NormalizedName = "customer"
                        },
                        new
                        {
                            Id = "c2d4b743-d9da-443c-9f5a-c2682750c805",
                            ConcurrencyStamp = "c0ec81ad-96d2-493d-b238-e83eb7150a42",
                            Name = "Boss",
                            NormalizedName = "boss"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "308da0db-e863-4814-8930-de3540e5406d",
                            RoleId = "b979036b-d165-4bea-b6b6-16b22a3f54dd"
                        },
                        new
                        {
                            UserId = "927e4f6a-62ed-4e13-b002-7e133eb47bbc",
                            RoleId = "cc2a0eb3-8736-441d-9130-5b421db3ac0e"
                        },
                        new
                        {
                            UserId = "e7610feb-110c-47d0-9a88-1bfdc12742a4",
                            RoleId = "c2d4b743-d9da-443c-9f5a-c2682750c805"
                        },
                        new
                        {
                            UserId = "e9012ef1-cd3c-49a1-8726-7f8f8aba9f98",
                            RoleId = "c2d4b743-d9da-443c-9f5a-c2682750c805"
                        },
                        new
                        {
                            UserId = "08b84a20-7e7d-4353-bb53-74c79732beed",
                            RoleId = "423e498c-fc67-4853-ac4f-f3cd91d32e87"
                        },
                        new
                        {
                            UserId = "b6256340-7bd0-4373-8549-c6a08053396b",
                            RoleId = "423e498c-fc67-4853-ac4f-f3cd91d32e87"
                        },
                        new
                        {
                            UserId = "6f8ce951-2f66-4a9e-a4fa-7a14f85b54c6",
                            RoleId = "423e498c-fc67-4853-ac4f-f3cd91d32e87"
                        },
                        new
                        {
                            UserId = "a0c9e67b-d593-4a56-93cd-063ec5d5d035",
                            RoleId = "423e498c-fc67-4853-ac4f-f3cd91d32e87"
                        },
                        new
                        {
                            UserId = "fd4fd02a-238d-4efc-a187-14d205a841f0",
                            RoleId = "423e498c-fc67-4853-ac4f-f3cd91d32e87"
                        },
                        new
                        {
                            UserId = "3b488e0f-eb92-4994-a555-cbe4ecdf3672",
                            RoleId = "6b30cb05-12f7-46c2-b95f-8d783c1f9eb1"
                        },
                        new
                        {
                            UserId = "52999f6b-a605-45b0-b98f-b8880fc46027",
                            RoleId = "6b30cb05-12f7-46c2-b95f-8d783c1f9eb1"
                        },
                        new
                        {
                            UserId = "39b465e2-c398-494f-bb62-d1eb02aa5471",
                            RoleId = "6665ddaa-72f9-4f90-a6b1-43eb68dea610"
                        },
                        new
                        {
                            UserId = "ce4b2f5c-1fb9-4fe1-945c-20eca474ce16",
                            RoleId = "6665ddaa-72f9-4f90-a6b1-43eb68dea610"
                        },
                        new
                        {
                            UserId = "fd9a7449-e604-48c1-a638-c564e17c1bc0",
                            RoleId = "6665ddaa-72f9-4f90-a6b1-43eb68dea610"
                        },
                        new
                        {
                            UserId = "57b2db13-1d08-48a4-adca-41d837bb8937",
                            RoleId = "78c5228f-f600-4545-abcd-f4cc21d18e4c"
                        },
                        new
                        {
                            UserId = "3a6a1f70-8f67-4f8a-b1f9-267e5d621edb",
                            RoleId = "78c5228f-f600-4545-abcd-f4cc21d18e4c"
                        },
                        new
                        {
                            UserId = "5ce20f05-c625-43fc-ae25-a7514e9520db",
                            RoleId = "78c5228f-f600-4545-abcd-f4cc21d18e4c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "927e4f6a-62ed-4e13-b002-7e133eb47bbc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9723223b-1efa-46f6-91cf-426894e247c7",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lilsuperadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            LastName = "Lil",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILSUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "LILSUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOqxcMXIOFlHhCw5BquTMCCsqH9TGAO/NXUWcoin8L0ODSaunW8DgyWyyg7ko273w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lilsuperadmin@gmail.com"
                        },
                        new
                        {
                            Id = "308da0db-e863-4814-8930-de3540e5406d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10adb25b-10a0-4d97-aaa1-30c8efd2781e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yungadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Yung",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUNGADMIN@GMAIL.COM",
                            NormalizedUserName = "YUNGADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPwLEEYPbrc9Ycfy2yHeqKEOTEwKpihVfVt3YeLHD7GcXCnXCrcUn1amSqN/1m6k1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "yungadmin@gmail.com"
                        },
                        new
                        {
                            Id = "e7610feb-110c-47d0-9a88-1bfdc12742a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69bbe3cb-0932-4e8d-9c5c-cbcb92f34b7b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trankieuloan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loan",
                            LastName = "Trần Kiều",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANKIEULOAN@GMAIL.COM",
                            NormalizedUserName = "TRANKIEULOAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIZRztCt33HwY431v1PCeWyQu38AtBXltn5+VWyUw4WsfB9Wc1X7Rlr4nMd3dW35Zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "trankieuloan@gmail.com"
                        },
                        new
                        {
                            Id = "e9012ef1-cd3c-49a1-8726-7f8f8aba9f98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16c05e2a-4a94-47de-8e69-6675bbdf634e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phamvinhson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sơn",
                            LastName = "Phạm Vĩnh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHAMVINHSON@GMAIL.COM",
                            NormalizedUserName = "PHAMVINHSON@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ5ZQh4hn+Ug8y4ZuUsQAjUxfYEIGX/mwJ9xC4H3i5VqXBi5zAAkjP/fTVMNbwam0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phamvinhson@gmail.com"
                        },
                        new
                        {
                            Id = "08b84a20-7e7d-4353-bb53-74c79732beed",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a6232da-bde9-4a5b-9c4c-e34ec92732ee",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyentrunghieu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hiếu",
                            LastName = "Nguyễn Trung",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTRUNGHIEU@GMAIL.COM",
                            NormalizedUserName = "NGUYENTRUNGHIEU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEijQYYcss1hG5MXdW+ZlnCAvvesMpzPSPOQziwxiQZhXfNajM1loX4nc+0nEIU1+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyentrunghieu@gmail.com"
                        },
                        new
                        {
                            Id = "b6256340-7bd0-4373-8549-c6a08053396b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ee198b2-0bab-43aa-bc90-5306d936c689",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyennhuloc@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lộc",
                            LastName = "Nguyễn Như",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENNHULOC@GMAIL.COM",
                            NormalizedUserName = "NGUYENNHULOC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7hoiOu6DKi4yw9DhCsTQvE/zT56NpydAhiYc91kP797k3xmJNKuvpsyQp5SACBEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyennhuloc@gmail.com"
                        },
                        new
                        {
                            Id = "6f8ce951-2f66-4a9e-a4fa-7a14f85b54c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83effe20-7df3-4763-a45b-035c199636ff",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "caothivananh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Cao Thị Vân",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOTHIVANANH@GMAIL.COM",
                            NormalizedUserName = "CAOTHIVANANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPbsKGnVuiGeThaqiB7f0iK3qCmU3X/yOLAZQ0EEjk0N536EYU9pN4eTwE/tSSNZsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caothivananh@gmail.com"
                        },
                        new
                        {
                            Id = "a0c9e67b-d593-4a56-93cd-063ec5d5d035",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cdc4f72-e07e-46d3-bfa6-715790e8f6d6",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tranthaonguyen@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyên",
                            LastName = "Trần Thảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANTHAONGUYEN@GMAIL.COM",
                            NormalizedUserName = "TRANTHAONGUYEN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENCat4S/4cXxmbTnfTfNOY9eSSJe77mFBjDj80ibE6l7Olj0iOuC120TjNcVTND/0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tranthaonguyen@gmail.com"
                        },
                        new
                        {
                            Id = "fd4fd02a-238d-4efc-a187-14d205a841f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b11d599c-ff3c-4a88-80bf-05127f6e283a",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "truongthitramanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Trương Thị Trâm",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTHITRAMANH@GMAIL.COM",
                            NormalizedUserName = "TRUONGTHITRAMANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFdjb3fLLeegkZ7AiHt2j2W1ywH4Qgg1itH8U0WOoNcaIMH+kRrK5QmbWRi9wZ3I0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongthitramanh@gmail.com"
                        },
                        new
                        {
                            Id = "3b488e0f-eb92-4994-a555-cbe4ecdf3672",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cbafcb10-934f-47db-bf2c-6a519841281d",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "caobaquat@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quát",
                            LastName = "Cao Bá",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOBAQUAT@GMAIL.COM",
                            NormalizedUserName = "CAOBAQUAT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDcWnt1YVefRwPZL/m4qh9Jx7+GiEd+UXsHB0VgH7/Qz7Q/tMA9NyAn31xsBR7QP8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caobaquat@gmail.com"
                        },
                        new
                        {
                            Id = "52999f6b-a605-45b0-b98f-b8880fc46027",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eed382c0-adb1-49d2-a7bb-77f3bcfe6a12",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huynhtranthanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thành",
                            LastName = "Huỳnh Trấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYNHTRANTHANH@GMAIL.COM",
                            NormalizedUserName = "HUYNHTRANTHANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENb6qljuvqH6w4EA8rkKM+oPehGjlaxMUe778l2d40eXE7C2/FmNAc8D3wH5TxJFDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "huynhtranthanh@gmail.com"
                        },
                        new
                        {
                            Id = "39b465e2-c398-494f-bb62-d1eb02aa5471",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29c751f2-f23e-4f91-a140-568c71559958",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenthanhlong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Long",
                            LastName = "Nguyễn Thành",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHLONG@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHLONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDi905kyiZnE8wbcSOUAu87j2BYsLaUZ79Bauy+fwf4drxl12o+oR6LZslHbIXT4mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhlong@gmail.com"
                        },
                        new
                        {
                            Id = "ce4b2f5c-1fb9-4fe1-945c-20eca474ce16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38355fb5-3378-4c46-8cce-34a1591ba894",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoxuanhuong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hương",
                            LastName = "Hồ Xuân",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOXUANHUONG@GMAIL.COM",
                            NormalizedUserName = "HOXUANHUONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF0Oxg0CQY01Vp4owxemWUsqEQ3oiyAktVnAtZ+VBFiWxdMRE4KCqHlC9/6PACjvIA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoxuanhuong@gmail.com"
                        },
                        new
                        {
                            Id = "fd9a7449-e604-48c1-a638-c564e17c1bc0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e9ce7f0-ef26-41cf-b5d2-cc54d3e37995",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nguyenhue@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huệ",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENHUE@GMAIL.COM",
                            NormalizedUserName = "NGUYENHUE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELJhc/yTAgL6+Qzbc/y5WP2gQvwA+uqOCearrSSyRmUIMsrIZ5CVDow3C6mzU53wmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenhue@gmail.com"
                        },
                        new
                        {
                            Id = "57b2db13-1d08-48a4-adca-41d837bb8937",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c6a53fe-9110-46c6-873a-3e72ec480e1e",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phungthanhdo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Độ",
                            LastName = "Phùng Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUNGTHANHDO@GMAIL.COM",
                            NormalizedUserName = "PHUNGTHANHDO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF/XJG9rikYSSI54Tqz+e/ETYblBop7lYCgnHGZEryYPf2IXtwx9ytnCuQlRqTVmEQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phungthanhdo@gmail.com"
                        },
                        new
                        {
                            Id = "3a6a1f70-8f67-4f8a-b1f9-267e5d621edb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c73922d-2693-4e3f-a25d-5341371349bb",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "phantantrung@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trung",
                            LastName = "Phan Tấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHANTANTRUNG@GMAIL.COM",
                            NormalizedUserName = "PHANTANTRUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMgI8xR1N67sh6EFfDxAx4vX+/XIMjPKUdHOI31mOseWJBf6LWX3J4mlV2l05MzMUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phantantrung@gmail.com"
                        },
                        new
                        {
                            Id = "5ce20f05-c625-43fc-ae25-a7514e9520db",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02ec30ef-4b20-47b8-af88-031a358902c5",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "truongtuantu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tú",
                            LastName = "Trương Tuấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTUANTU@GMAIL.COM",
                            NormalizedUserName = "TRUONGTUANTU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFOidTYZ6gw2qO/84dHobMQ3+4sxZXnk+YmCItshkSGfF1vJC9g1RwnhQ/I3MmSP+A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongtuantu@gmail.com"
                        });
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodsDeliveryNoteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityReturned")
                        .HasColumnType("float");

                    b.Property<double>("SinglePrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GoodsDeliveryNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsDeliveryDetails");
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("GoodsDeliveryNotes");
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodsReceivingNoteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("SinglePurchasePrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceivingNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsReceivingDetails");
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseProposalFormId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseProposalFormId");

                    b.HasIndex("UserId");

                    b.ToTable("GoodsReceivingNotes");
                });

            modelBuilder.Entity("api.Entities.InventoryRecordDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActualQuantity")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryRecordId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OldQuantity")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryRecordId");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryRecordDetails");
                });

            modelBuilder.Entity("api.Entities.InventoryRecordForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InventoryRecordForms");
                });

            modelBuilder.Entity("api.Entities.MerchandiseReturnDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MerchandiseReturnProposalId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityReturned")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseReturnProposalId");

                    b.HasIndex("ProductId");

                    b.ToTable("MerchandiseReturnDetails");
                });

            modelBuilder.Entity("api.Entities.MerchandiseReturnProposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodsDeliveryNoteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodsDeliveryNoteId");

                    b.ToTable("MerchandiseReturnProposals");
                });

            modelBuilder.Entity("api.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("api.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityNeed")
                        .HasColumnType("float");

                    b.Property<double>("QuantityReturned")
                        .HasColumnType("float");

                    b.Property<double>("QuantitySold")
                        .HasColumnType("float");

                    b.Property<double>("SinglePrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSaledDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MaxQuantity")
                        .HasColumnType("float");

                    b.Property<double?>("MinQuantity")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityForSale")
                        .HasColumnType("float");

                    b.Property<double>("QuantityOrdered")
                        .HasColumnType("float");

                    b.Property<double>("QuantityReturned")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Bơ Đăk Lăk",
                            Price = 90000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 262.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00048",
                            Status = 1
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Bòn Bon Thái",
                            Price = 25000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 896.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00001",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Bưởi Đoan Hùng",
                            Price = 60000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 259.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00002",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cam Xã Đoài (Vinh, Nghệ An)",
                            Price = 85000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 251.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00003",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cam xoàn Lai Vung",
                            Price = 65000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 979.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00004",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chanh dây",
                            Price = 47000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 6.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00005",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chôm chôm nhãn",
                            Price = 64000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 311.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00006",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chôm chôm Thái",
                            Price = 19000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 900.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00007",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chuối cau lửa",
                            Price = 41000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 21.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00008",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chuối già hương",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 298.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00009",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chuối sứ",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 592.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00010",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dâu tây Đà Lạt",
                            Price = 96000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 171.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00011",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Đu đủ vàng",
                            Price = 27000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 543.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00012",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa đỏ không hạt",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 253.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00013",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa hấu hắc mỹ nhân",
                            Price = 35000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 324.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00014",
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lê trắng",
                            Price = 63000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 743.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00015",
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lưới giống Nhật",
                            Price = 345000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 811.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00016",
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lưới ruột đỏ",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 105.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00017",
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lưới vàng",
                            Price = 81000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 495.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00018",
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dứa Việt Nam",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 322.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00019",
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dừa xiêm Bến Tre",
                            Price = 20000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 759.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00020",
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng chín Đà Lạt",
                            Price = 86000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 42.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00021",
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng giòn Đà Lạt",
                            Price = 34000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 728.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00022",
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng xiêm Tiền Giang",
                            Price = 42000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 420.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00023",
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cherry New Zealand Gift Box 2kg",
                            Price = 1600000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 369.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00024",
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Kiwi ruột đỏ NewZealand",
                            Price = 66000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 969.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00025",
                            Status = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Kiwi Vàng New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 818.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00026",
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Kiwi Xanh New Zealand",
                            Price = 135000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 655.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00027",
                            Status = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Breeze NewZealand",
                            Price = 83000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 852.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00028",
                            Status = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Envy New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 509.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00029",
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Jazz New Zealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 904.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00030",
                            Status = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Kiku (Size lớn) - Táo Newzealand",
                            Price = 119000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 29.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00031",
                            Status = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Rockit Newzealand",
                            Price = 155000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 306.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00032",
                            Status = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Royal Gala Newzealand",
                            Price = 99000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 976.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00033",
                            Status = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo xanh Newzealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 726.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00034",
                            Status = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chanh vàng Sunkist Mỹ",
                            Price = 51250.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 998.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00035",
                            Status = 1
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cherry đỏ Canada",
                            Price = 519000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 675.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00036",
                            Status = 1
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cherry Đỏ Mỹ",
                            Price = 490000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 389.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00037",
                            Status = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng giòn Mỹ",
                            Price = 409000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 813.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00038",
                            Status = 1
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Lựu Mỹ",
                            Price = 399000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 885.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00039",
                            Status = 1
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận đen Mỹ",
                            Price = 410000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 672.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00040",
                            Status = 1
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận đỏ Red Plum Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 485.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00041",
                            Status = 1
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long (tím) Mỹ",
                            Price = 46000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 802.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00042",
                            Status = 1
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long (xanh) Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 764.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00043",
                            Status = 1
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long đen Mỹ",
                            Price = 109000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 439.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00044",
                            Status = 1
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long đỏ Mỹ",
                            Price = 94000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 21.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00045",
                            Status = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long Farmily Tree Mỹ",
                            Price = 32000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 819.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00046",
                            Status = 1
                        });
                });

            modelBuilder.Entity("api.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây nhập khẩu"
                        });
                });

            modelBuilder.Entity("api.Entities.ProductRemoveDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductRemoveFormId")
                        .HasColumnType("int");

                    b.Property<double>("RemovedQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductRemoveFormId");

                    b.ToTable("ProductRemoveDetails");
                });

            modelBuilder.Entity("api.Entities.ProductRemoveForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProductRemoveForms");
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("RatioFromDefault")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUnits");
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseProposalFormId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityPurchased")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseProposalFormId");

                    b.ToTable("PurchaseProposalDetails");
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OnTimeOrNotStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseProposalForms");
                });

            modelBuilder.Entity("api.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("api.Entities.SupplierProduct", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("SupplierId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SupplierProducts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryDetail", b =>
                {
                    b.HasOne("api.Entities.GoodsDeliveryNote", "GoodsDeliveryNote")
                        .WithMany("GoodsDeliveryDetails")
                        .HasForeignKey("GoodsDeliveryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.GoodsDeliveryNote", b =>
                {
                    b.HasOne("api.Entities.Order", "Order")
                        .WithMany("GoodsDeliveryNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingDetail", b =>
                {
                    b.HasOne("api.Entities.GoodsReceivingNote", "GoodsReceivingNote")
                        .WithMany("GoodsReceivingDetails")
                        .HasForeignKey("GoodsReceivingNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("GoodsReceivingDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingNote", b =>
                {
                    b.HasOne("api.Entities.PurchaseProposalForm", "PurchaseProposalForm")
                        .WithMany("GoodsReceivingNotes")
                        .HasForeignKey("PurchaseProposalFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Entities.InventoryRecordDetail", b =>
                {
                    b.HasOne("api.Entities.InventoryRecordForm", "InventoryRecordForm")
                        .WithMany("InventoryRecordDetails")
                        .HasForeignKey("InventoryRecordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("InventoryRecordDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.InventoryRecordForm", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Entities.MerchandiseReturnDetail", b =>
                {
                    b.HasOne("api.Entities.MerchandiseReturnProposal", "MerchandiseReturnProposal")
                        .WithMany()
                        .HasForeignKey("MerchandiseReturnProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.MerchandiseReturnProposal", b =>
                {
                    b.HasOne("api.Entities.GoodsDeliveryNote", "GoodsDeliveryNote")
                        .WithMany("MerchandiseReturnProposals")
                        .HasForeignKey("GoodsDeliveryNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Order", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Entities.OrderDetail", b =>
                {
                    b.HasOne("api.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.HasOne("api.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.ProductRemoveDetail", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("ProductRemoveDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Entities.ProductRemoveForm", "ProductRemoveForm")
                        .WithMany("ProductRemoveDetails")
                        .HasForeignKey("ProductRemoveFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.ProductRemoveForm", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalDetail", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Entities.PurchaseProposalForm", "PurchaseProposalForm")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("PurchaseProposalFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalForm", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("api.Entities.SupplierProduct", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Entities.Supplier", "Supplier")
                        .WithMany("SupplierProducts")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
