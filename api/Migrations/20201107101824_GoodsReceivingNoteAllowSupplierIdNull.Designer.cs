// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201107101824_GoodsReceivingNoteAllowSupplierIdNull")]
    partial class GoodsReceivingNoteAllowSupplierIdNull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "79a1c890-0a2a-4662-a671-31259529efb8",
                            ConcurrencyStamp = "2fdef7c3-1be2-4fee-a066-7b5acceff0cc",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "a719f0ca-08c9-4394-b367-b2ce25a1e128",
                            ConcurrencyStamp = "8fb56d81-3ff2-45d4-9901-01c9d4655fed",
                            Name = "Sale",
                            NormalizedName = "sale"
                        },
                        new
                        {
                            Id = "4e8fee5c-c8f5-42d7-8aec-d096105902e7",
                            ConcurrencyStamp = "e413a535-fc2f-4260-a68c-100eabd78337",
                            Name = "SuperAdmin",
                            NormalizedName = "superadmin"
                        },
                        new
                        {
                            Id = "29589e3d-509f-4c29-8af8-287d4d9ec0b9",
                            ConcurrencyStamp = "1f6f151d-f71d-46db-ad7e-e4952dea436d",
                            Name = "WarehouseKeeperManager",
                            NormalizedName = "warehousekeepermanager"
                        },
                        new
                        {
                            Id = "805501f6-04e4-4b5b-bb40-93c8bb37d3c1",
                            ConcurrencyStamp = "7847876d-0808-4808-b317-0529b660abf2",
                            Name = "WarehouseKeeper",
                            NormalizedName = "warehousekeeper"
                        },
                        new
                        {
                            Id = "9f6556e5-8888-4c27-89d8-6dc8a117f39e",
                            ConcurrencyStamp = "11cb1d45-c327-4368-813f-1c0b670d1fe2",
                            Name = "Customer",
                            NormalizedName = "customer"
                        },
                        new
                        {
                            Id = "e4ba4f82-fa2c-4097-81ea-0522f389cbdb",
                            ConcurrencyStamp = "e337c6cc-c214-4f5c-9666-3764899b6fa5",
                            Name = "Boss",
                            NormalizedName = "boss"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "fc87487f-f4c7-4620-9e5f-54522a2a840c",
                            RoleId = "79a1c890-0a2a-4662-a671-31259529efb8"
                        },
                        new
                        {
                            UserId = "a021afea-2227-4d1f-ae1e-d0919cf24e66",
                            RoleId = "4e8fee5c-c8f5-42d7-8aec-d096105902e7"
                        },
                        new
                        {
                            UserId = "1b5f2b00-985b-4d2a-8b47-68edfbfe1533",
                            RoleId = "e4ba4f82-fa2c-4097-81ea-0522f389cbdb"
                        },
                        new
                        {
                            UserId = "dc3dae2c-b865-465a-9532-b4fbced8aec7",
                            RoleId = "e4ba4f82-fa2c-4097-81ea-0522f389cbdb"
                        },
                        new
                        {
                            UserId = "7d21fbb4-d086-423b-8333-cf2eb40a6630",
                            RoleId = "9f6556e5-8888-4c27-89d8-6dc8a117f39e"
                        },
                        new
                        {
                            UserId = "624317a0-6812-4762-bf4c-dfb0585b5dec",
                            RoleId = "9f6556e5-8888-4c27-89d8-6dc8a117f39e"
                        },
                        new
                        {
                            UserId = "ca010183-88b4-4c49-ad55-cf3e88160baf",
                            RoleId = "9f6556e5-8888-4c27-89d8-6dc8a117f39e"
                        },
                        new
                        {
                            UserId = "3a8a23f0-a877-484c-8153-4310cf0e7261",
                            RoleId = "9f6556e5-8888-4c27-89d8-6dc8a117f39e"
                        },
                        new
                        {
                            UserId = "fe4a3c49-bd9b-4134-8c9b-79b6c29ec2fe",
                            RoleId = "9f6556e5-8888-4c27-89d8-6dc8a117f39e"
                        },
                        new
                        {
                            UserId = "f78b17c4-9135-437e-bafa-7cd75100ffe2",
                            RoleId = "29589e3d-509f-4c29-8af8-287d4d9ec0b9"
                        },
                        new
                        {
                            UserId = "bc82aca3-13c5-41ce-8b26-5a2d4a672558",
                            RoleId = "29589e3d-509f-4c29-8af8-287d4d9ec0b9"
                        },
                        new
                        {
                            UserId = "ea710cf9-aced-44d5-b962-7d8adfb146b9",
                            RoleId = "805501f6-04e4-4b5b-bb40-93c8bb37d3c1"
                        },
                        new
                        {
                            UserId = "cd57242f-0163-48f3-815d-b7704e452ae3",
                            RoleId = "805501f6-04e4-4b5b-bb40-93c8bb37d3c1"
                        },
                        new
                        {
                            UserId = "0b1073ab-685b-46a4-994e-08df5ae557bc",
                            RoleId = "805501f6-04e4-4b5b-bb40-93c8bb37d3c1"
                        },
                        new
                        {
                            UserId = "5f8b781d-d5e6-4aa4-950d-a100f3d7288c",
                            RoleId = "a719f0ca-08c9-4394-b367-b2ce25a1e128"
                        },
                        new
                        {
                            UserId = "dc8de206-f832-4465-b7cc-bd4005eb6f6f",
                            RoleId = "a719f0ca-08c9-4394-b367-b2ce25a1e128"
                        },
                        new
                        {
                            UserId = "6e4f9b76-93d6-44a9-bb9d-b8e4e4d37ce5",
                            RoleId = "a719f0ca-08c9-4394-b367-b2ce25a1e128"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a021afea-2227-4d1f-ae1e-d0919cf24e66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19c67c86-77e9-4cef-b2eb-f14f8789cc20",
                            Email = "lilsuperadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            LastName = "Lil",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILSUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "LILSUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJJOLIggn8S273NgdrRiXwJlWu9rH1oTRW7QtGq7sEf/pT9ZXWirEgHzY8ZQNXsQGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lilsuperadmin@gmail.com"
                        },
                        new
                        {
                            Id = "fc87487f-f4c7-4620-9e5f-54522a2a840c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "239a4fc9-229e-494f-b781-d358faf4a0ce",
                            Email = "yungadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Yung",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUNGADMIN@GMAIL.COM",
                            NormalizedUserName = "YUNGADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE7DReo8endFODOqHps0uwFMvQSCwjzb31cCgm5xeoz7c3il/Y3JlmR08WvcYCxPuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "yungadmin@gmail.com"
                        },
                        new
                        {
                            Id = "1b5f2b00-985b-4d2a-8b47-68edfbfe1533",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3caa70eb-0750-4e4a-a6a5-5197cc92964b",
                            Email = "trankieuloan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loan",
                            LastName = "Trần Kiều",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANKIEULOAN@GMAIL.COM",
                            NormalizedUserName = "TRANKIEULOAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBRvABR6g6YTE7J3hIR2dCxzoqZ2ylB4+l+4aEulCXTxsNanEexIiTHyOq7fY9jTqA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "trankieuloan@gmail.com"
                        },
                        new
                        {
                            Id = "dc3dae2c-b865-465a-9532-b4fbced8aec7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d9c613b-ab30-446e-9de9-eff21483669e",
                            Email = "phamvinhson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sơn",
                            LastName = "Phạm Vĩnh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHAMVINHSON@GMAIL.COM",
                            NormalizedUserName = "PHAMVINHSON@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBbeiaOT6DVlIZ0ikgIQ9Z7eMa1x0yf3NTLuq2bybf2Kl6B27PYFwoVd54p0yQLe2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phamvinhson@gmail.com"
                        },
                        new
                        {
                            Id = "7d21fbb4-d086-423b-8333-cf2eb40a6630",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1b1d4d3-c766-4c4c-ab26-bc0ba6025fd6",
                            Email = "nguyentrunghieu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hiếu",
                            LastName = "Nguyễn Trung",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTRUNGHIEU@GMAIL.COM",
                            NormalizedUserName = "NGUYENTRUNGHIEU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEP6dKLei/F0LEfZ2KclBLRGSWypOCQYS7jeBCaBY3zSTxJXFHzTyG9IBabFeqCuJjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyentrunghieu@gmail.com"
                        },
                        new
                        {
                            Id = "624317a0-6812-4762-bf4c-dfb0585b5dec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e18c0155-affb-495e-89ff-3613931dee37",
                            Email = "nguyennhuloc@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lộc",
                            LastName = "Nguyễn Như",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENNHULOC@GMAIL.COM",
                            NormalizedUserName = "NGUYENNHULOC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBGq7XG/UwjU2mlqAwWAYyTEkX6xUfkFNGOT5yR+AjQ7u9yzkkhmjoOAbACEX9wrEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyennhuloc@gmail.com"
                        },
                        new
                        {
                            Id = "ca010183-88b4-4c49-ad55-cf3e88160baf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ce10409-e3be-44ae-a3d0-5bc7fff05550",
                            Email = "caothivananh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Cao Thị Vân",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOTHIVANANH@GMAIL.COM",
                            NormalizedUserName = "CAOTHIVANANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH5yCCTcZQ814FIkrJQ0TGQz1bYfqHreHCCQsQH5PvLcC91PxvTYwd7e+9umOvu/Dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caothivananh@gmail.com"
                        },
                        new
                        {
                            Id = "3a8a23f0-a877-484c-8153-4310cf0e7261",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cac2aa42-78be-452e-8ab3-200ac3a2e0c0",
                            Email = "tranthaonguyen@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyên",
                            LastName = "Trần Thảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANTHAONGUYEN@GMAIL.COM",
                            NormalizedUserName = "TRANTHAONGUYEN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFkR4tZ9AxNc/qeJNvi8uOpo/2exVnBFaDqn6IbgXxtx4ullXVxcA5LP28Wf+ApcHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tranthaonguyen@gmail.com"
                        },
                        new
                        {
                            Id = "fe4a3c49-bd9b-4134-8c9b-79b6c29ec2fe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70981ffa-b81c-4bec-9fdc-a20e7b344391",
                            Email = "truongthitramanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Trương Thị Trâm",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTHITRAMANH@GMAIL.COM",
                            NormalizedUserName = "TRUONGTHITRAMANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKOkl1Yzh8QGSdP0S1bFu2crtriw1x23O1wUoBTSrINSK2+WXysxSeDfOExmGBXFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongthitramanh@gmail.com"
                        },
                        new
                        {
                            Id = "f78b17c4-9135-437e-bafa-7cd75100ffe2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45b30c35-724f-4279-a9e3-5de1ab8df8ee",
                            Email = "caobaquat@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quát",
                            LastName = "Cao Bá",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOBAQUAT@GMAIL.COM",
                            NormalizedUserName = "CAOBAQUAT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDpzP3gIa5Kl+7rYtwNfJsqUHPVacIHYmIz4xTNlDAtcaoXfYCP5vO8sGJpVLHx3Lw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caobaquat@gmail.com"
                        },
                        new
                        {
                            Id = "bc82aca3-13c5-41ce-8b26-5a2d4a672558",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3240f2bc-c536-4fa3-bc74-a41f9b1b9456",
                            Email = "huynhtranthanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thành",
                            LastName = "Huỳnh Trấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYNHTRANTHANH@GMAIL.COM",
                            NormalizedUserName = "HUYNHTRANTHANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFFrEiZDz84Ppsj04U/0BHNcPv6Zh7n+xcDLYXFIw3CamODBqchjCXNk2NP3/voGZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "huynhtranthanh@gmail.com"
                        },
                        new
                        {
                            Id = "ea710cf9-aced-44d5-b962-7d8adfb146b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41e966ff-2bef-4aae-a717-1b1d1dc1fcf6",
                            Email = "nguyenthanhlong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Long",
                            LastName = "Nguyễn Thành",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHLONG@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHLONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQNmlyyJnKed3tgzR0nKkGFSpMjvSrloWEQai/LdBOJ6PwYfG33F7mDrx8ag7M2vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhlong@gmail.com"
                        },
                        new
                        {
                            Id = "cd57242f-0163-48f3-815d-b7704e452ae3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b94256cf-0838-46f0-8e4a-c69bbd71e84f",
                            Email = "hoxuanhuong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hương",
                            LastName = "Hồ Xuân",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOXUANHUONG@GMAIL.COM",
                            NormalizedUserName = "HOXUANHUONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIsxU5p0ZQAkqhSkMGY+H5484blLP5esFNWeF+EfqH53RUTuEzRB+HYRRNj6OAdTTQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoxuanhuong@gmail.com"
                        },
                        new
                        {
                            Id = "0b1073ab-685b-46a4-994e-08df5ae557bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50d9aad2-e30f-4044-aeb4-2bdc9c7ceea2",
                            Email = "nguyenhue@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huệ",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENHUE@GMAIL.COM",
                            NormalizedUserName = "NGUYENHUE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGRu5jpiScRNjCd4hdiPujBnzNcZ9pmO/UI2nj5HSWTbzi3wVKdVkxTESnDd/unu/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenhue@gmail.com"
                        },
                        new
                        {
                            Id = "5f8b781d-d5e6-4aa4-950d-a100f3d7288c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e2bc30d-d683-46f6-8cf8-1ef1b7e205b5",
                            Email = "phungthanhdo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Độ",
                            LastName = "Phùng Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUNGTHANHDO@GMAIL.COM",
                            NormalizedUserName = "PHUNGTHANHDO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPVyGgYBrcQ+K0gz7IIo1K2nVbvhbYlA9LKuHmkyr5WOq+0qu29+4/Ma9Yx2QokV2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phungthanhdo@gmail.com"
                        },
                        new
                        {
                            Id = "dc8de206-f832-4465-b7cc-bd4005eb6f6f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60344045-f52a-4bfd-a019-334d09e73a32",
                            Email = "phantantrung@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trung",
                            LastName = "Phan Tấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHANTANTRUNG@GMAIL.COM",
                            NormalizedUserName = "PHANTANTRUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIU5rZXitZf5snfoRQKr09Sq+5uvCX1ej/XCVgozVzbLlSabBJObZHs51JrBbPwfTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phantantrung@gmail.com"
                        },
                        new
                        {
                            Id = "6e4f9b76-93d6-44a9-bb9d-b8e4e4d37ce5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bd58ebf9-c46e-4046-bbe4-170cbc70d3f3",
                            Email = "truongtuantu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tú",
                            LastName = "Trương Tuấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTUANTU@GMAIL.COM",
                            NormalizedUserName = "TRUONGTUANTU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPpOfl0Saxw91TM4MnWKDJeQptxIUdkCZJYIYh6Luz5P4TW4GaO8negPInAtEega7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongtuantu@gmail.com"
                        });
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodsReceivingNoteId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GoodsReceivingNoteId");

                    b.HasIndex("ProductId");

                    b.ToTable("GoodsReceivingDetails");
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GoodsReceivingNotes");
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSaledDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MaxQuantity")
                        .HasColumnType("float");

                    b.Property<double?>("MinQuantity")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityForSale")
                        .HasColumnType("float");

                    b.Property<double>("QuantityOrdered")
                        .HasColumnType("float");

                    b.Property<double>("QuantityReturned")
                        .HasColumnType("float");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Bơ Đăk Lăk",
                            Price = 90000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 262.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00048",
                            Status = 1
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Bòn Bon Thái",
                            Price = 25000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 896.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00001",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Bưởi Đoan Hùng",
                            Price = 60000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 259.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00002",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cam Xã Đoài (Vinh, Nghệ An)",
                            Price = 85000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 251.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00003",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cam xoàn Lai Vung",
                            Price = 65000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 979.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00004",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chanh dây",
                            Price = 47000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 6.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00005",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chôm chôm nhãn",
                            Price = 64000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 311.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00006",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chôm chôm Thái",
                            Price = 19000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 900.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00007",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chuối cau lửa",
                            Price = 41000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 21.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00008",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chuối già hương",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 298.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00009",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chuối sứ",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 592.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00010",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dâu tây Đà Lạt",
                            Price = 96000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 171.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00011",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Đu đủ vàng",
                            Price = 27000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 543.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00012",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa đỏ không hạt",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 253.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00013",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa hấu hắc mỹ nhân",
                            Price = 35000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 324.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00014",
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lê trắng",
                            Price = 63000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 743.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00015",
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lưới giống Nhật",
                            Price = 345000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 811.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00016",
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lưới ruột đỏ",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 105.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00017",
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dưa lưới vàng",
                            Price = 81000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 495.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00018",
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dứa Việt Nam",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 322.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00019",
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Dừa xiêm Bến Tre",
                            Price = 20000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 759.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00020",
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng chín Đà Lạt",
                            Price = 86000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 42.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00021",
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng giòn Đà Lạt",
                            Price = 34000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 728.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00022",
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng xiêm Tiền Giang",
                            Price = 42000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 420.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCVN-00023",
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cherry New Zealand Gift Box 2kg",
                            Price = 1600000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 369.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00024",
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Kiwi ruột đỏ NewZealand",
                            Price = 66000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 969.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00025",
                            Status = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Kiwi Vàng New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 818.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00026",
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Kiwi Xanh New Zealand",
                            Price = 135000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 655.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00027",
                            Status = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Breeze NewZealand",
                            Price = 83000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 852.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00028",
                            Status = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Envy New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 509.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00029",
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Jazz New Zealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 904.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00030",
                            Status = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Kiku (Size lớn) - Táo Newzealand",
                            Price = 119000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 29.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00031",
                            Status = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Rockit Newzealand",
                            Price = 155000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 306.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00032",
                            Status = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo Royal Gala Newzealand",
                            Price = 99000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 976.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00033",
                            Status = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Táo xanh Newzealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 726.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00034",
                            Status = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Chanh vàng Sunkist Mỹ",
                            Price = 51250.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 998.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00035",
                            Status = 1
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cherry đỏ Canada",
                            Price = 519000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 675.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00036",
                            Status = 1
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Cherry Đỏ Mỹ",
                            Price = 490000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 389.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00037",
                            Status = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Hồng giòn Mỹ",
                            Price = 409000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 813.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00038",
                            Status = 1
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Lựu Mỹ",
                            Price = 399000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 885.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00039",
                            Status = 1
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận đen Mỹ",
                            Price = 410000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 672.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00040",
                            Status = 1
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận đỏ Red Plum Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 485.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00041",
                            Status = 1
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long (tím) Mỹ",
                            Price = 46000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 802.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00042",
                            Status = 1
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long (xanh) Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 764.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00043",
                            Status = 1
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long đen Mỹ",
                            Price = 109000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 439.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00044",
                            Status = 1
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long đỏ Mỹ",
                            Price = 94000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 21.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00045",
                            Status = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000.0,
                            MinQuantity = 0.0,
                            Name = "Mận khủng long Farmily Tree Mỹ",
                            Price = 32000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 819.0,
                            QuantityForSale = 0.0,
                            QuantityOrdered = 0.0,
                            QuantityReturned = 0.0,
                            SKU = "SP-TCNK-00046",
                            Status = 1
                        });
                });

            modelBuilder.Entity("api.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây nhập khẩu"
                        });
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("RatioFromDefault")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUnits");
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseProposalFormId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("QuantityPurchased")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseProposalFormId");

                    b.ToTable("PurchaseProposalDetails");
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OnTimeOrNotStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseProposalForms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.GoodsReceivingDetail", b =>
                {
                    b.HasOne("api.Entities.GoodsReceivingNote", "GoodsReceivingNote")
                        .WithMany("GoodsReceivingDetails")
                        .HasForeignKey("GoodsReceivingNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("GoodsReceivingDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.HasOne("api.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalDetail", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Entities.PurchaseProposalForm", "PurchaseProposalForm")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("PurchaseProposalFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalForm", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
