// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201030014101_AddFieldExceptionReasonToPurchaseProposalForm")]
    partial class AddFieldExceptionReasonToPurchaseProposalForm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "40f9608d-94bd-4ee6-bf65-ae722e121dde",
                            ConcurrencyStamp = "f279a5e6-b04a-400d-a233-6dc595c61e8a",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "a33a3023-5922-4780-a255-83ae5a3d0582",
                            ConcurrencyStamp = "c3992212-b6c6-49db-a567-2b5d3c9a1805",
                            Name = "Sale",
                            NormalizedName = "sale"
                        },
                        new
                        {
                            Id = "283ecfb4-91e7-46cd-a1f1-424af2a9aba8",
                            ConcurrencyStamp = "1bd570a3-c5b3-44f2-a83e-97d8d3ab7953",
                            Name = "SuperAdmin",
                            NormalizedName = "superadmin"
                        },
                        new
                        {
                            Id = "13303781-d0c4-489a-8682-70d5411a3fd5",
                            ConcurrencyStamp = "cf585c27-ef53-41db-8242-8bc8add4f4ae",
                            Name = "WarehouseKeeperManager",
                            NormalizedName = "warehousekeepermanager"
                        },
                        new
                        {
                            Id = "4452f1a8-85ad-4170-8170-83991d8cca4e",
                            ConcurrencyStamp = "4f6d57e1-4ac2-44ca-baa0-b0b2c756fe41",
                            Name = "WarehouseKeeper",
                            NormalizedName = "warehousekeeper"
                        },
                        new
                        {
                            Id = "8d2ce0f3-8e0a-449a-9a46-8b939f0ea7b5",
                            ConcurrencyStamp = "ec67ba97-d6d3-4418-a47a-228932254347",
                            Name = "Customer",
                            NormalizedName = "customer"
                        },
                        new
                        {
                            Id = "084793b4-e989-43bd-895b-ce4026e202ea",
                            ConcurrencyStamp = "989e1559-95f5-4e34-886b-b88f4099b5f2",
                            Name = "Boss",
                            NormalizedName = "boss"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "e25e6448-071f-478d-91c3-82552d98bb10",
                            RoleId = "40f9608d-94bd-4ee6-bf65-ae722e121dde"
                        },
                        new
                        {
                            UserId = "0a12b251-c5f6-43b4-ab81-aac3c19af44b",
                            RoleId = "283ecfb4-91e7-46cd-a1f1-424af2a9aba8"
                        },
                        new
                        {
                            UserId = "c5a91de8-95b3-4ed9-9bd9-073bfcac7dd8",
                            RoleId = "084793b4-e989-43bd-895b-ce4026e202ea"
                        },
                        new
                        {
                            UserId = "73fa172e-baa9-4235-bcfe-a826158b07e8",
                            RoleId = "084793b4-e989-43bd-895b-ce4026e202ea"
                        },
                        new
                        {
                            UserId = "8535a0b2-70b4-44a4-afa0-684efd6b0614",
                            RoleId = "8d2ce0f3-8e0a-449a-9a46-8b939f0ea7b5"
                        },
                        new
                        {
                            UserId = "e3917b48-6d07-4e92-8c64-701e0bdb0e10",
                            RoleId = "8d2ce0f3-8e0a-449a-9a46-8b939f0ea7b5"
                        },
                        new
                        {
                            UserId = "96e18e74-c26a-4fd8-aa3e-27fc9fa77800",
                            RoleId = "8d2ce0f3-8e0a-449a-9a46-8b939f0ea7b5"
                        },
                        new
                        {
                            UserId = "bedf9245-9a30-4a7a-8f7b-d9082f522aa4",
                            RoleId = "8d2ce0f3-8e0a-449a-9a46-8b939f0ea7b5"
                        },
                        new
                        {
                            UserId = "c00dee5e-bc85-4074-8741-7ee4c66862e6",
                            RoleId = "8d2ce0f3-8e0a-449a-9a46-8b939f0ea7b5"
                        },
                        new
                        {
                            UserId = "4e3b0737-2682-41ed-850e-e28f58da3053",
                            RoleId = "13303781-d0c4-489a-8682-70d5411a3fd5"
                        },
                        new
                        {
                            UserId = "e47c4183-74a0-4660-b247-aa2de384d70b",
                            RoleId = "13303781-d0c4-489a-8682-70d5411a3fd5"
                        },
                        new
                        {
                            UserId = "ad7c5c61-b274-49aa-ace8-acb6c855ea86",
                            RoleId = "4452f1a8-85ad-4170-8170-83991d8cca4e"
                        },
                        new
                        {
                            UserId = "bb9b07ae-7fc7-4cec-bc48-c32efe6ad51b",
                            RoleId = "4452f1a8-85ad-4170-8170-83991d8cca4e"
                        },
                        new
                        {
                            UserId = "8ccf5253-33cc-45c0-a391-5564ef3c0835",
                            RoleId = "4452f1a8-85ad-4170-8170-83991d8cca4e"
                        },
                        new
                        {
                            UserId = "55867d78-8673-4a4f-9b71-3989b1b2b55c",
                            RoleId = "a33a3023-5922-4780-a255-83ae5a3d0582"
                        },
                        new
                        {
                            UserId = "ba8fbf13-728b-4e3f-929d-be8022dc6424",
                            RoleId = "a33a3023-5922-4780-a255-83ae5a3d0582"
                        },
                        new
                        {
                            UserId = "192955e8-f106-4c09-8120-99909e832d38",
                            RoleId = "a33a3023-5922-4780-a255-83ae5a3d0582"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "0a12b251-c5f6-43b4-ab81-aac3c19af44b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "615822a1-822a-45ab-8b75-97d37445f8b7",
                            Email = "lilsuperadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            LastName = "Lil",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILSUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "LILSUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMIkf5lO7v1/QeyTmnOwW7EOb8ebsW8znApT8fC/40I5ksrn1oTCWdoAHKScsXZDRA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lilsuperadmin@gmail.com"
                        },
                        new
                        {
                            Id = "e25e6448-071f-478d-91c3-82552d98bb10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71d19aa8-2055-4941-821d-c116b7b0363c",
                            Email = "yungadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Yung",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUNGADMIN@GMAIL.COM",
                            NormalizedUserName = "YUNGADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK1/NNGPa/+mM9esDr+2AWCDy4BaomSsGQ7njb8aJF1zweFkFp2f2nWxBqNRy/g5VQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "yungadmin@gmail.com"
                        },
                        new
                        {
                            Id = "c5a91de8-95b3-4ed9-9bd9-073bfcac7dd8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f50f9cd4-af50-4e12-8fbc-14c0ee428584",
                            Email = "trankieuloan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loan",
                            LastName = "Trần Kiều",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANKIEULOAN@GMAIL.COM",
                            NormalizedUserName = "TRANKIEULOAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEbCXOUzGNMVeMlx5kTHTAXXvrhbLf2io5w3qUgk2PTfZjGEuziJa6AMgZoovQ5ESA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "trankieuloan@gmail.com"
                        },
                        new
                        {
                            Id = "73fa172e-baa9-4235-bcfe-a826158b07e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eec5e6c0-a211-4a3e-a72a-48ad234789e3",
                            Email = "phamvinhson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sơn",
                            LastName = "Phạm Vĩnh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHAMVINHSON@GMAIL.COM",
                            NormalizedUserName = "PHAMVINHSON@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEODQiEBdKeYwzCCFyaJZu3utW3+BGKFkLN4W5LkpNSdn2VU8Nhxx4GyU9meJIVo1SA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phamvinhson@gmail.com"
                        },
                        new
                        {
                            Id = "8535a0b2-70b4-44a4-afa0-684efd6b0614",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1a337ef-e2b8-4ef6-9934-13880927d57f",
                            Email = "nguyentrunghieu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hiếu",
                            LastName = "Nguyễn Trung",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTRUNGHIEU@GMAIL.COM",
                            NormalizedUserName = "NGUYENTRUNGHIEU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEITMqou1QsPDRuM3lceldMDeDNPePVCHFWoWtD2/Uko5OKBUVGY2PKsD0pLFcs7IGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyentrunghieu@gmail.com"
                        },
                        new
                        {
                            Id = "e3917b48-6d07-4e92-8c64-701e0bdb0e10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "454a99b7-90d1-4e0c-b2b3-729611737566",
                            Email = "nguyennhuloc@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lộc",
                            LastName = "Nguyễn Như",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENNHULOC@GMAIL.COM",
                            NormalizedUserName = "NGUYENNHULOC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMI6JWCnV9f7cIwkCxAmUjg8Zz54oMxE6BjiwFYkYXEt/0v23ovHFBJ23UvT10WHVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyennhuloc@gmail.com"
                        },
                        new
                        {
                            Id = "96e18e74-c26a-4fd8-aa3e-27fc9fa77800",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d7e8955-cfd9-426a-a167-6b33253e5592",
                            Email = "caothivananh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Cao Thị Vân",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOTHIVANANH@GMAIL.COM",
                            NormalizedUserName = "CAOTHIVANANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJzOqkbLazCXEyxbgcXrOZ7nseS/JNrXM9n0G8nuebbR1MFZylnu2Asir/vVabSszg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caothivananh@gmail.com"
                        },
                        new
                        {
                            Id = "bedf9245-9a30-4a7a-8f7b-d9082f522aa4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78e03ea3-d824-413d-bdb4-fcec799ea535",
                            Email = "tranthaonguyen@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyên",
                            LastName = "Trần Thảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANTHAONGUYEN@GMAIL.COM",
                            NormalizedUserName = "TRANTHAONGUYEN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI9ZU2+BV8nhfNU1fN3qeh3CS7/IA9c7rGUOxWPXD5VpLrwz+cFoe6+B0avCJ9klsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tranthaonguyen@gmail.com"
                        },
                        new
                        {
                            Id = "c00dee5e-bc85-4074-8741-7ee4c66862e6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8958b22e-82f3-4dc9-8ca1-2e6d42c3ccb3",
                            Email = "truongthitramanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Trương Thị Trâm",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTHITRAMANH@GMAIL.COM",
                            NormalizedUserName = "TRUONGTHITRAMANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOWQextxXSvucy9syMvBNyeZqWEY/KS1kfGlwWkImwC9HqfhoRWxGB0AsBc4qhqayA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongthitramanh@gmail.com"
                        },
                        new
                        {
                            Id = "4e3b0737-2682-41ed-850e-e28f58da3053",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b997fb27-63b9-4e72-98a3-395a5fc89ac4",
                            Email = "caobaquat@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quát",
                            LastName = "Cao Bá",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOBAQUAT@GMAIL.COM",
                            NormalizedUserName = "CAOBAQUAT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDVVwZm1mVuHkWRtlCy4eK4t7pLd6jIliinKCd6iAiqijsyU/jtFWtkbWmL6pmxqFw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caobaquat@gmail.com"
                        },
                        new
                        {
                            Id = "e47c4183-74a0-4660-b247-aa2de384d70b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9360c00b-33a1-4f55-ba5a-2c06ed5777ba",
                            Email = "huynhtranthanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thành",
                            LastName = "Huỳnh Trấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYNHTRANTHANH@GMAIL.COM",
                            NormalizedUserName = "HUYNHTRANTHANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJHbRNUpjLmt2CWSfXZF8hbhK1eAIEmLH3KXJ7pWzPB8ZrnvN6F0HdvIH3PBQfMCaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "huynhtranthanh@gmail.com"
                        },
                        new
                        {
                            Id = "ad7c5c61-b274-49aa-ace8-acb6c855ea86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd9c255c-366f-463a-8f95-fe2c4de544c9",
                            Email = "nguyenthanhlong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Long",
                            LastName = "Nguyễn Thành",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHLONG@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHLONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJK4Uf8Ur3C1TePuZq/ftesDnCoCL6WKZlgoNKXK8hnshaepZ+lO78JPb/XBNcwL1g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhlong@gmail.com"
                        },
                        new
                        {
                            Id = "bb9b07ae-7fc7-4cec-bc48-c32efe6ad51b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ac9abe8-5ada-4e8c-a268-b9ca70bbc0a4",
                            Email = "hoxuanhuong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hương",
                            LastName = "Hồ Xuân",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOXUANHUONG@GMAIL.COM",
                            NormalizedUserName = "HOXUANHUONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENxQSQT3aUIKHwyUu/+ew7Lxj0e/OL4idy4dwVR3yez5mAWUZw0PfDGUxcyaCwYzXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoxuanhuong@gmail.com"
                        },
                        new
                        {
                            Id = "8ccf5253-33cc-45c0-a391-5564ef3c0835",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ae5a028-9642-4929-acc4-538597b9acd6",
                            Email = "nguyenhue@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huệ",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENHUE@GMAIL.COM",
                            NormalizedUserName = "NGUYENHUE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECarTIwAK047XkdjpI3COQ4FMjCyuWUEtnFcJ2D5spUtGeEkJgMNVZlYgd2dPMMjxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenhue@gmail.com"
                        },
                        new
                        {
                            Id = "55867d78-8673-4a4f-9b71-3989b1b2b55c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f05537b7-0c8b-49ea-a9d5-e3ba0c0d852a",
                            Email = "phungthanhdo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Độ",
                            LastName = "Phùng Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUNGTHANHDO@GMAIL.COM",
                            NormalizedUserName = "PHUNGTHANHDO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOqgWepnFTxXAHoixRBeyE1lU1sI6e7eNpvh/JUZToJ4yr7g6j6nQJpOAJ40ubf7CQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phungthanhdo@gmail.com"
                        },
                        new
                        {
                            Id = "ba8fbf13-728b-4e3f-929d-be8022dc6424",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d34ed56-ac5b-4705-ade4-e7177bcd5cf1",
                            Email = "phantantrung@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trung",
                            LastName = "Phan Tấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHANTANTRUNG@GMAIL.COM",
                            NormalizedUserName = "PHANTANTRUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI33cnbEjvGYLCvTc/QvflzZk6WBajdAqU80r365OwOREKtxSxBwFFjyZMdb2Bbjyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phantantrung@gmail.com"
                        },
                        new
                        {
                            Id = "192955e8-f106-4c09-8120-99909e832d38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95c563c4-d09b-4c74-8b3a-0a30adcfebfd",
                            Email = "truongtuantu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tú",
                            LastName = "Trương Tuấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTUANTU@GMAIL.COM",
                            NormalizedUserName = "TRUONGTUANTU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEt7l0r2gJuXU+d52u4SBSwJgqwjjRAda/UGf9xZNHnDJY+Gk46idQbk3/KqLnFBrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongtuantu@gmail.com"
                        });
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSaledDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Bơ Đăk Lăk",
                            Price = 90000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 262,
                            SKU = "SP-TCVN-00048",
                            Status = 1
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Bòn Bon Thái",
                            Price = 25000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 896,
                            SKU = "SP-TCVN-00001",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Bưởi Đoan Hùng",
                            Price = 60000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 259,
                            SKU = "SP-TCVN-00002",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cam Xã Đoài (Vinh, Nghệ An)",
                            Price = 85000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 251,
                            SKU = "SP-TCVN-00003",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cam xoàn Lai Vung",
                            Price = 65000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 979,
                            SKU = "SP-TCVN-00004",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chanh dây",
                            Price = 47000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 6,
                            SKU = "SP-TCVN-00005",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chôm chôm nhãn",
                            Price = 64000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 311,
                            SKU = "SP-TCVN-00006",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chôm chôm Thái",
                            Price = 19000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 900,
                            SKU = "SP-TCVN-00007",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chuối cau lửa",
                            Price = 41000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 21,
                            SKU = "SP-TCVN-00008",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chuối già hương",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 298,
                            SKU = "SP-TCVN-00009",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chuối sứ",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 592,
                            SKU = "SP-TCVN-00010",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dâu tây Đà Lạt",
                            Price = 96000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 171,
                            SKU = "SP-TCVN-00011",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Đu đủ vàng",
                            Price = 27000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 543,
                            SKU = "SP-TCVN-00012",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa đỏ không hạt",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 253,
                            SKU = "SP-TCVN-00013",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa hấu hắc mỹ nhân",
                            Price = 35000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 324,
                            SKU = "SP-TCVN-00014",
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lê trắng",
                            Price = 63000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 743,
                            SKU = "SP-TCVN-00015",
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lưới giống Nhật",
                            Price = 345000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 811,
                            SKU = "SP-TCVN-00016",
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lưới ruột đỏ",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 105,
                            SKU = "SP-TCVN-00017",
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lưới vàng",
                            Price = 81000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 495,
                            SKU = "SP-TCVN-00018",
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dứa Việt Nam",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 322,
                            SKU = "SP-TCVN-00019",
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dừa xiêm Bến Tre",
                            Price = 20000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 759,
                            SKU = "SP-TCVN-00020",
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng chín Đà Lạt",
                            Price = 86000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 42,
                            SKU = "SP-TCVN-00021",
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng giòn Đà Lạt",
                            Price = 34000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 728,
                            SKU = "SP-TCVN-00022",
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng xiêm Tiền Giang",
                            Price = 42000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 420,
                            SKU = "SP-TCVN-00023",
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cherry New Zealand Gift Box 2kg",
                            Price = 1600000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 369,
                            SKU = "SP-TCNK-00024",
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Kiwi ruột đỏ NewZealand",
                            Price = 66000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 969,
                            SKU = "SP-TCNK-00025",
                            Status = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Kiwi Vàng New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 818,
                            SKU = "SP-TCNK-00026",
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Kiwi Xanh New Zealand",
                            Price = 135000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 655,
                            SKU = "SP-TCNK-00027",
                            Status = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Breeze NewZealand",
                            Price = 83000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 852,
                            SKU = "SP-TCNK-00028",
                            Status = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Envy New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 509,
                            SKU = "SP-TCNK-00029",
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Jazz New Zealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 904,
                            SKU = "SP-TCNK-00030",
                            Status = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Kiku (Size lớn) - Táo Newzealand",
                            Price = 119000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 29,
                            SKU = "SP-TCNK-00031",
                            Status = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Rockit Newzealand",
                            Price = 155000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 306,
                            SKU = "SP-TCNK-00032",
                            Status = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Royal Gala Newzealand",
                            Price = 99000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 976,
                            SKU = "SP-TCNK-00033",
                            Status = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo xanh Newzealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 726,
                            SKU = "SP-TCNK-00034",
                            Status = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chanh vàng Sunkist Mỹ",
                            Price = 51250.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 998,
                            SKU = "SP-TCNK-00035",
                            Status = 1
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cherry đỏ Canada",
                            Price = 519000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 675,
                            SKU = "SP-TCNK-00036",
                            Status = 1
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cherry Đỏ Mỹ",
                            Price = 490000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 389,
                            SKU = "SP-TCNK-00037",
                            Status = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng giòn Mỹ",
                            Price = 409000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 813,
                            SKU = "SP-TCNK-00038",
                            Status = 1
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Lựu Mỹ",
                            Price = 399000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 885,
                            SKU = "SP-TCNK-00039",
                            Status = 1
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận đen Mỹ",
                            Price = 410000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 672,
                            SKU = "SP-TCNK-00040",
                            Status = 1
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận đỏ Red Plum Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 485,
                            SKU = "SP-TCNK-00041",
                            Status = 1
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long (tím) Mỹ",
                            Price = 46000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 802,
                            SKU = "SP-TCNK-00042",
                            Status = 1
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long (xanh) Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 764,
                            SKU = "SP-TCNK-00043",
                            Status = 1
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long đen Mỹ",
                            Price = 109000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 439,
                            SKU = "SP-TCNK-00044",
                            Status = 1
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long đỏ Mỹ",
                            Price = 94000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 21,
                            SKU = "SP-TCNK-00045",
                            Status = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long Farmily Tree Mỹ",
                            Price = 32000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 819,
                            SKU = "SP-TCNK-00046",
                            Status = 1
                        });
                });

            modelBuilder.Entity("api.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây nhập khẩu"
                        });
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("RatioFromDefault")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUnits");
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseProposalFormId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseProposalFormId");

                    b.ToTable("PurchaseProposalDetails");
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OnTimeOrNotStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PurchaseProposalForms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.HasOne("api.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalDetail", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Entities.PurchaseProposalForm", "PurchaseProposalForm")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("PurchaseProposalFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
