// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201021042753_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "55c87258-7dd4-4457-b19e-cdc2610a614d",
                            ConcurrencyStamp = "447aee1e-c05f-41b1-ab6e-cc0344007660",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "09f73ec7-0087-439b-9483-e357547a024b",
                            ConcurrencyStamp = "329f6dd7-4a71-441f-a0ab-8722275632ed",
                            Name = "SuperAdmin",
                            NormalizedName = "superadmin"
                        },
                        new
                        {
                            Id = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094",
                            ConcurrencyStamp = "bbe3d4cd-8704-4a2c-8195-4279cbe7a219",
                            Name = "Customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "f6b6f34d-9b82-451c-95c3-c3508c91e81b",
                            RoleId = "55c87258-7dd4-4457-b19e-cdc2610a614d"
                        },
                        new
                        {
                            UserId = "21e2a2ba-79b6-48d5-b734-b5eb07aa1348",
                            RoleId = "09f73ec7-0087-439b-9483-e357547a024b"
                        },
                        new
                        {
                            UserId = "ffa51c62-1729-48ea-a1be-44090dd809b5",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "e9c6e7de-70a5-48ce-81ce-f64ed14d3453",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "c27b5e8e-8cd2-4297-a7c7-dc5a1facec1c",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "3fbde490-eefc-48ed-90bc-c359f670b93e",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "01cd768b-b548-48d8-8ba1-95d4136ca85a",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "c1f16337-45eb-41a6-8563-eb35a4da746b",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "163a9a16-cdf6-428b-aa1d-a9fa2cc054c2",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "37865622-4310-44ba-902e-a4a82ffb07ac",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "49c41914-24e5-4b1b-8751-91b2b1ee88d4",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "4c62ad2f-63f7-4a85-963f-3c06ab5fff3f",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "7efe4f15-45fc-4aa8-b2d2-6858eebe34b1",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "766f6481-df4d-432c-a832-5f47ead81296",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "2fc4a62b-72e0-4ce1-aa38-c30cb15821bc",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "75e69b67-2484-4a03-bb2a-cfb654467e74",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        },
                        new
                        {
                            UserId = "ce79ae28-4cff-4817-ba0e-6958afc9cbe2",
                            RoleId = "bbfa21f7-30dd-4229-8a32-bcc5edb1e094"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "21e2a2ba-79b6-48d5-b734-b5eb07aa1348",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3c6342a-4bbf-4ccc-9367-00c4818fd026",
                            Email = "lilsuperadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            LastName = "Lil",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILSUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "LILSUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGvLtM5JWo9s5FI5ttZI3itblrQytqrZhw4Y0IkG/Eidl/JqnU71hZBR33BU8bobVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lilsuperadmin@gmail.com"
                        },
                        new
                        {
                            Id = "f6b6f34d-9b82-451c-95c3-c3508c91e81b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77bad35e-ae42-4179-b7fb-42f0f57eca3d",
                            Email = "yungadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Yung",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUNGADMIN@GMAIL.COM",
                            NormalizedUserName = "YUNGADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDWKRGW2D9tAAqspoicKclOtviL3bBoUJ4JwacGf+W5hfj0hL9+v8tD0xWX8k3H8KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "yungadmin@gmail.com"
                        },
                        new
                        {
                            Id = "ffa51c62-1729-48ea-a1be-44090dd809b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3337c29d-a195-4a40-97f1-d52e8fead64f",
                            Email = "trankieuloan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loan",
                            LastName = "Trần Kiều",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANKIEULOAN@GMAIL.COM",
                            NormalizedUserName = "TRANKIEULOAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELajcXMnQ2/ennjtT8CK4nUBJ38GyHf64vSFEI5L43x9NpE5jl/eMyvJZCcaeE06nQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "trankieuloan@gmail.com"
                        },
                        new
                        {
                            Id = "e9c6e7de-70a5-48ce-81ce-f64ed14d3453",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d20f333-11ae-46dc-afce-9c9ab4917272",
                            Email = "phamvinhson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sơn",
                            LastName = "Phạm Vĩnh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHAMVINHSON@GMAIL.COM",
                            NormalizedUserName = "PHAMVINHSON@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDUsTdLDyg9D8n6MMei0m5UD1Ka5nc+zHT0QeJnB9StY63sYO+yLU1Uz/Q1WPX5bvw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phamvinhson@gmail.com"
                        },
                        new
                        {
                            Id = "c27b5e8e-8cd2-4297-a7c7-dc5a1facec1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14ba0abc-e942-4ecd-894d-9ebcc5235458",
                            Email = "nguyentrunghieu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hiếu",
                            LastName = "Nguyễn Trung",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTRUNGHIEU@GMAIL.COM",
                            NormalizedUserName = "NGUYENTRUNGHIEU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKVdLTVBGRoG5COSwvlsE3I+v4MQ/qfPaH9Mc/obVONWHqa8p2tBXZojEg4Hi81sQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyentrunghieu@gmail.com"
                        },
                        new
                        {
                            Id = "3fbde490-eefc-48ed-90bc-c359f670b93e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7635bb4-88d7-4117-a085-1bcb74d0fbd2",
                            Email = "nguyennhuloc@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lộc",
                            LastName = "Nguyễn Như",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENNHULOC@GMAIL.COM",
                            NormalizedUserName = "NGUYENNHULOC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMg5yyClndfEpGaEcEs+JorW4jufz+0KDMy3dwVjwKujIaQMzLJIjZwu4/vfLzoPCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyennhuloc@gmail.com"
                        },
                        new
                        {
                            Id = "01cd768b-b548-48d8-8ba1-95d4136ca85a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9149953d-3b88-4b55-8d56-0fa5bd337438",
                            Email = "caothivananh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Cao Thị Vân",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOTHIVANANH@GMAIL.COM",
                            NormalizedUserName = "CAOTHIVANANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBHbcaH83n2MeNXRJl13C4AaAvh6UoLvqk8T9TpsOi/9x4COkWsHBSlIG7VQUCMApw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caothivananh@gmail.com"
                        },
                        new
                        {
                            Id = "c1f16337-45eb-41a6-8563-eb35a4da746b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6afcd8df-003d-470d-ae27-ef80044643db",
                            Email = "tranthaonguyen@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyên",
                            LastName = "Trần Thảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANTHAONGUYEN@GMAIL.COM",
                            NormalizedUserName = "TRANTHAONGUYEN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELxwfAQfwH8iwmou4xHBQSN1VafF37kgYEWxsl0UnhipPg/VuO8DtCMCnp6ckgEeiQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tranthaonguyen@gmail.com"
                        },
                        new
                        {
                            Id = "163a9a16-cdf6-428b-aa1d-a9fa2cc054c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d0dc967-1325-4ae6-8412-6e2621b4fb6a",
                            Email = "truongthitramanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Trương Thị Trâm",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTHITRAMANH@GMAIL.COM",
                            NormalizedUserName = "TRUONGTHITRAMANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHbuZaHPx4dYieA16VQ2E4Pu3oTREvUyuX6s5zhHPHMRRaYZpmFM4r0js0w4u+cJhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongthitramanh@gmail.com"
                        },
                        new
                        {
                            Id = "37865622-4310-44ba-902e-a4a82ffb07ac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "732baa51-49cc-4d01-8eaf-21c8e9a00ac0",
                            Email = "caobaquat@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quát",
                            LastName = "Cao Bá",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOBAQUAT@GMAIL.COM",
                            NormalizedUserName = "CAOBAQUAT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMj0MYYje3+fzJdLJkliYarH/vIDOEth89l3Pd0/OshaJz2vM4XHFq9jN5nlEnA8IQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caobaquat@gmail.com"
                        },
                        new
                        {
                            Id = "49c41914-24e5-4b1b-8751-91b2b1ee88d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bc975bce-a9bd-49f2-ba0f-ad106c046750",
                            Email = "huynhtranthanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thành",
                            LastName = "Huỳnh Trấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYNHTRANTHANH@GMAIL.COM",
                            NormalizedUserName = "HUYNHTRANTHANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHNgqw+3l8q2C/ObKRM4CbWePw/W5s5Paa71iCqnQbmDvjrl4f2Zl+0mJt7Z4EWdNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "huynhtranthanh@gmail.com"
                        },
                        new
                        {
                            Id = "4c62ad2f-63f7-4a85-963f-3c06ab5fff3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "932fc424-cdc8-4b25-acfe-f7c454acd364",
                            Email = "nguyenthanhlong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Long",
                            LastName = "Nguyễn Thành",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHLONG@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHLONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMw5XQvoRSMHq0LG77r+QFmqO11LcTlpTL/8dMPzeXBFfVoOcJ0ig/FjYzWfkXhadw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhlong@gmail.com"
                        },
                        new
                        {
                            Id = "7efe4f15-45fc-4aa8-b2d2-6858eebe34b1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2cc6a73-831a-4c27-aba1-2dff0ba63185",
                            Email = "hoxuanhuong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hương",
                            LastName = "Hồ Xuân",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOXUANHUONG@GMAIL.COM",
                            NormalizedUserName = "HOXUANHUONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI7fhAulxJsnVWvkN2sGtuUvWXLUU3qV05bi58qCYfaoAagoMXbGIVEQWyd7IiqC+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoxuanhuong@gmail.com"
                        },
                        new
                        {
                            Id = "766f6481-df4d-432c-a832-5f47ead81296",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49a06f44-c410-4ae9-aafe-bf0915698261",
                            Email = "nguyenhue@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huệ",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENHUE@GMAIL.COM",
                            NormalizedUserName = "NGUYENHUE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPZSNx5eUP8JqLKTZFKcMrA92mz7o6B1CJaXAuH22fM/aZDj4POrFVVyNCHwusHoyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenhue@gmail.com"
                        },
                        new
                        {
                            Id = "2fc4a62b-72e0-4ce1-aa38-c30cb15821bc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44b2c900-cfe5-4c7f-9280-b6b51031ab06",
                            Email = "phungthanhdo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Độ",
                            LastName = "Phùng Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUNGTHANHDO@GMAIL.COM",
                            NormalizedUserName = "PHUNGTHANHDO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEIGFXUQM2+MT5OVWsPPEOC2CIjMIcZGG+zO+IGFJKcqJPcTtvh0eZ4K3/nKjozF2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phungthanhdo@gmail.com"
                        },
                        new
                        {
                            Id = "75e69b67-2484-4a03-bb2a-cfb654467e74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "efd7f02f-b18f-4935-8daf-c9c0507e9f61",
                            Email = "phantantrung@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trung",
                            LastName = "Phan Tấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHANTANTRUNG@GMAIL.COM",
                            NormalizedUserName = "PHANTANTRUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH1GG2GC3ZgAHWn+kNTBiC3rFtJLZjcOQ/I86wWsA1PcqHuNT+bOSU4aXCPViHirog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phantantrung@gmail.com"
                        },
                        new
                        {
                            Id = "ce79ae28-4cff-4817-ba0e-6958afc9cbe2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7604bc5-aa84-46ca-9e60-e316c0c7dbc8",
                            Email = "truongtuantu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tú",
                            LastName = "Trương Tuấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTUANTU@GMAIL.COM",
                            NormalizedUserName = "TRUONGTUANTU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPGJfMJEvrcKKNpUNAY5Kt/g9+UtyWokgp9W10xs9MAJajF7VOOggG/hukGN9S+HvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongtuantu@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
