// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Helpers;

namespace api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201022105753_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "dc0c8327-1585-449b-bb85-e625dd4e80e9",
                            ConcurrencyStamp = "858ae0b5-f7d2-4d69-abc6-1a76e2b606ae",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "ba479549-2ab7-40c1-8e42-6a012bdff37e",
                            ConcurrencyStamp = "0651690c-2985-4be1-b2d1-f251c8f12e9f",
                            Name = "SuperAdmin",
                            NormalizedName = "superadmin"
                        },
                        new
                        {
                            Id = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9",
                            ConcurrencyStamp = "8a637f8b-c275-48d3-81ff-8f912ff9ac97",
                            Name = "Customer",
                            NormalizedName = "customer"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "dec0378c-22d6-4dd3-9364-9119754be1e4",
                            RoleId = "dc0c8327-1585-449b-bb85-e625dd4e80e9"
                        },
                        new
                        {
                            UserId = "9acf7547-6023-4a96-8348-1561c6ac9584",
                            RoleId = "ba479549-2ab7-40c1-8e42-6a012bdff37e"
                        },
                        new
                        {
                            UserId = "e40a0547-c27a-4c0b-a1b1-6ccc1b7f899e",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "8db1d145-54ac-4284-8c03-51fea0aa2056",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "8c6bd9da-b80c-4ab5-a7fc-4df8b553d249",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "ac3b2941-ed87-43cb-97cc-0db82f4a26a1",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "2a398cdb-fbdc-4861-9648-f9248a64e752",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "82fb9f32-0147-44fe-a033-0f34f5ce6df6",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "4ea7eb06-81e3-48c3-a5c3-a3fdb65ab511",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "10d1e461-454d-4e1d-ac1c-ae33089aab55",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "378dfba4-a020-4e66-9968-d7b705206b2e",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "86298f0c-e9dc-4de0-b113-649d9bf29c86",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "78a53551-c7c8-4cdb-9240-18aeed93c813",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "ec334e06-5a04-43f5-a9a2-4633190ce6e8",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "40b65402-debb-4013-b539-42618960fc3f",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "5ada5a37-2c5e-475f-a81e-eab0eeb95c99",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        },
                        new
                        {
                            UserId = "eeabb473-4ce0-4b7f-8715-6d5a5067e151",
                            RoleId = "d9fb8da7-1623-481b-87c4-b87dd4bb28c9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("api.Common.Enums.PurchaseProposalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseProposalFormId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseProposalFormId");

                    b.ToTable("PurchaseProposalDetails");
                });

            modelBuilder.Entity("api.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9acf7547-6023-4a96-8348-1561c6ac9584",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1303a16-5218-45c3-b0ca-18fb2f7bba90",
                            Email = "lilsuperadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Super Admin",
                            LastName = "Lil",
                            LockoutEnabled = false,
                            NormalizedEmail = "LILSUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "LILSUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJZbn6RFoNxLl84DiqFijmJUoW+5huxFbDdruegzTew8VBSP1RuDn2oQAkzNVCj82Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "lilsuperadmin@gmail.com"
                        },
                        new
                        {
                            Id = "dec0378c-22d6-4dd3-9364-9119754be1e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f36f9ba-ea7c-4748-9316-043dcc9487e8",
                            Email = "yungadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Yung",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUNGADMIN@GMAIL.COM",
                            NormalizedUserName = "YUNGADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGlLFf8zzGhzwVfno4huGLRaQImLgEoLhrwvrFJtnlVYZg7tMqJPQQQ3++S+kJKdzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "yungadmin@gmail.com"
                        },
                        new
                        {
                            Id = "e40a0547-c27a-4c0b-a1b1-6ccc1b7f899e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "561ac951-c928-4dd5-b6ce-7fda58f7dc31",
                            Email = "trankieuloan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Loan",
                            LastName = "Trần Kiều",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANKIEULOAN@GMAIL.COM",
                            NormalizedUserName = "TRANKIEULOAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECMlGru/S08g5nwqPMm0YFmB8oyy03r2JZE2F1DJNhy/mUfpTzf0kqAYktzllIcbWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "trankieuloan@gmail.com"
                        },
                        new
                        {
                            Id = "8db1d145-54ac-4284-8c03-51fea0aa2056",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27abee8c-14d7-460a-898c-a0d347e1ae23",
                            Email = "phamvinhson@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Sơn",
                            LastName = "Phạm Vĩnh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHAMVINHSON@GMAIL.COM",
                            NormalizedUserName = "PHAMVINHSON@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECZI1GxBY6kRglScrwCN9SLj4tSGphySzZEv/fbGOkp/tLkZpwmTvnxRXLfAd9nIbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phamvinhson@gmail.com"
                        },
                        new
                        {
                            Id = "8c6bd9da-b80c-4ab5-a7fc-4df8b553d249",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89b33961-5843-4830-9d97-787e0b80ae25",
                            Email = "nguyentrunghieu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hiếu",
                            LastName = "Nguyễn Trung",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTRUNGHIEU@GMAIL.COM",
                            NormalizedUserName = "NGUYENTRUNGHIEU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA+iTsUI28TWdnU2i2iZX75vTpW42/9ppioqcST7Fq8FkJXCVM8+Uoi8WQ9l6AV5fw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyentrunghieu@gmail.com"
                        },
                        new
                        {
                            Id = "ac3b2941-ed87-43cb-97cc-0db82f4a26a1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a578909a-f8c3-4185-b37c-8693897904a1",
                            Email = "nguyennhuloc@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lộc",
                            LastName = "Nguyễn Như",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENNHULOC@GMAIL.COM",
                            NormalizedUserName = "NGUYENNHULOC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBvSDOs0GWTOoJupTbtmI8L3ZKxU2fNuian6jOgIyOpl1mDEfKbSK0BMzxUgsh4zow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyennhuloc@gmail.com"
                        },
                        new
                        {
                            Id = "2a398cdb-fbdc-4861-9648-f9248a64e752",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e33c7de0-bfa8-4146-a5ef-6921e32b5cf5",
                            Email = "caothivananh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Cao Thị Vân",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOTHIVANANH@GMAIL.COM",
                            NormalizedUserName = "CAOTHIVANANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEZE4Yt5f6FzbIiWocascZr+aghvVdu3h3P72SzNz3Ng9nqQ2zxsRVYBx8pQq9Aegg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caothivananh@gmail.com"
                        },
                        new
                        {
                            Id = "82fb9f32-0147-44fe-a033-0f34f5ce6df6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a397ec38-9a87-4129-a4ff-cd8b0a75637d",
                            Email = "tranthaonguyen@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nguyên",
                            LastName = "Trần Thảo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRANTHAONGUYEN@GMAIL.COM",
                            NormalizedUserName = "TRANTHAONGUYEN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB5cLaEIfQBtMuKzw1xDOEd65Hbtofp8fMRUiwm4lo4udba6et59GHS3gpD4yDKbcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tranthaonguyen@gmail.com"
                        },
                        new
                        {
                            Id = "4ea7eb06-81e3-48c3-a5c3-a3fdb65ab511",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "190331a0-8450-4ab2-8a0e-f51a7c7f77fd",
                            Email = "truongthitramanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Anh",
                            LastName = "Trương Thị Trâm",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTHITRAMANH@GMAIL.COM",
                            NormalizedUserName = "TRUONGTHITRAMANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIqX7pWyXVl1endcI51rLAbSZkvqEAWsZ/vytiE48IWfHQCqs0aRP72seQd+HjP+dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongthitramanh@gmail.com"
                        },
                        new
                        {
                            Id = "10d1e461-454d-4e1d-ac1c-ae33089aab55",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1adf4d6d-5c2a-4dca-95b9-ad966020a40d",
                            Email = "caobaquat@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Quát",
                            LastName = "Cao Bá",
                            LockoutEnabled = false,
                            NormalizedEmail = "CAOBAQUAT@GMAIL.COM",
                            NormalizedUserName = "CAOBAQUAT@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO+3Ba2Jl0jrHy5CFZcRzkpvLUWZbZoe/K/J9nGl5NE9vedEZ6LMV8VqBCa1J1tYGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "caobaquat@gmail.com"
                        },
                        new
                        {
                            Id = "378dfba4-a020-4e66-9968-d7b705206b2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d17dc76-71b2-433f-ab45-2b575b66726f",
                            Email = "huynhtranthanh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Thành",
                            LastName = "Huỳnh Trấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUYNHTRANTHANH@GMAIL.COM",
                            NormalizedUserName = "HUYNHTRANTHANH@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEI/MiLhUXLpGa4N0VAG3CVJZdFMRYqt3sTAgGuQ/WO+wy2HLWP/vEXDyFZfgc1rxoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "huynhtranthanh@gmail.com"
                        },
                        new
                        {
                            Id = "86298f0c-e9dc-4de0-b113-649d9bf29c86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df859a48-7700-401c-bcdc-130bd83963d0",
                            Email = "nguyenthanhlong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Long",
                            LastName = "Nguyễn Thành",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENTHANHLONG@GMAIL.COM",
                            NormalizedUserName = "NGUYENTHANHLONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGKbViUk/KjptBlqYM4QyvEEVQkb1oe9Xd6wozQ2eDQNIHMdO2a7tNr5l/wqs3sTfA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenthanhlong@gmail.com"
                        },
                        new
                        {
                            Id = "78a53551-c7c8-4cdb-9240-18aeed93c813",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f0281ab-a96f-4d04-a244-b992cf599272",
                            Email = "hoxuanhuong@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Hương",
                            LastName = "Hồ Xuân",
                            LockoutEnabled = false,
                            NormalizedEmail = "HOXUANHUONG@GMAIL.COM",
                            NormalizedUserName = "HOXUANHUONG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMY9YQ+EpPU6SkhpS++uxKSRKUyxgJUYOTySsm8880hlnTnp9fqjyqYbbJjNbs05Rg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "hoxuanhuong@gmail.com"
                        },
                        new
                        {
                            Id = "ec334e06-5a04-43f5-a9a2-4633190ce6e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1efafea2-87bb-467a-87b1-4854e17da83e",
                            Email = "nguyenhue@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Huệ",
                            LastName = "Nguyễn",
                            LockoutEnabled = false,
                            NormalizedEmail = "NGUYENHUE@GMAIL.COM",
                            NormalizedUserName = "NGUYENHUE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHgmtFV76yIa9L41zxJjZ1zxCvkZRUkhPTrIQ7rbKsYH87fnCiZy6dSHCpczeIkHow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nguyenhue@gmail.com"
                        },
                        new
                        {
                            Id = "40b65402-debb-4013-b539-42618960fc3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "138f3c07-ff23-4f2e-bd17-d4db6760f615",
                            Email = "phungthanhdo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Độ",
                            LastName = "Phùng Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHUNGTHANHDO@GMAIL.COM",
                            NormalizedUserName = "PHUNGTHANHDO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECVJCbpI2/0F2441zsbhkNSr3GJJjqxvqX7AgYvr5NJw50iWpBIYFvtLPM+uuHWM7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phungthanhdo@gmail.com"
                        },
                        new
                        {
                            Id = "5ada5a37-2c5e-475f-a81e-eab0eeb95c99",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f888048-80a1-445a-a859-da699606318c",
                            Email = "phantantrung@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Trung",
                            LastName = "Phan Tấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "PHANTANTRUNG@GMAIL.COM",
                            NormalizedUserName = "PHANTANTRUNG@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKGXkzIcOXqZTYCk1X1X9JRnh+jwtfvXkgBG14NJbClISZCt/ZaQiqiY40+R4utvqQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phantantrung@gmail.com"
                        },
                        new
                        {
                            Id = "eeabb473-4ce0-4b7f-8715-6d5a5067e151",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "096c950e-ff09-4385-be21-331553d5122d",
                            Email = "truongtuantu@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Tú",
                            LastName = "Trương Tuấn",
                            LockoutEnabled = false,
                            NormalizedEmail = "TRUONGTUANTU@GMAIL.COM",
                            NormalizedUserName = "TRUONGTUANTU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMw+lDEYvAqPH/uLgv4PuIhG7HqQDy7V700Gr8sj5h4DEaSqm40WqPphsJHhDwrwzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "truongtuantu@gmail.com"
                        });
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastSaledDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<double>("PurchasePrice")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Bơ Đăk Lăk",
                            Price = 90000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 262,
                            SKU = "SP-TCVN-00048",
                            Status = 1
                        },
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Bòn Bon Thái",
                            Price = 25000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 896,
                            SKU = "SP-TCVN-00001",
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Bưởi Đoan Hùng",
                            Price = 60000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 259,
                            SKU = "SP-TCVN-00002",
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cam Xã Đoài (Vinh, Nghệ An)",
                            Price = 85000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 251,
                            SKU = "SP-TCVN-00003",
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cam xoàn Lai Vung",
                            Price = 65000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 979,
                            SKU = "SP-TCVN-00004",
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chanh dây",
                            Price = 47000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 6,
                            SKU = "SP-TCVN-00005",
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chôm chôm nhãn",
                            Price = 64000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 311,
                            SKU = "SP-TCVN-00006",
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chôm chôm Thái",
                            Price = 19000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 900,
                            SKU = "SP-TCVN-00007",
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chuối cau lửa",
                            Price = 41000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 21,
                            SKU = "SP-TCVN-00008",
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chuối già hương",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 298,
                            SKU = "SP-TCVN-00009",
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chuối sứ",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 592,
                            SKU = "SP-TCVN-00010",
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dâu tây Đà Lạt",
                            Price = 96000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 171,
                            SKU = "SP-TCVN-00011",
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Đu đủ vàng",
                            Price = 27000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 543,
                            SKU = "SP-TCVN-00012",
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa đỏ không hạt",
                            Price = 15000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 253,
                            SKU = "SP-TCVN-00013",
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa hấu hắc mỹ nhân",
                            Price = 35000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 324,
                            SKU = "SP-TCVN-00014",
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lê trắng",
                            Price = 63000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 743,
                            SKU = "SP-TCVN-00015",
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lưới giống Nhật",
                            Price = 345000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 811,
                            SKU = "SP-TCVN-00016",
                            Status = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lưới ruột đỏ",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 105,
                            SKU = "SP-TCVN-00017",
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dưa lưới vàng",
                            Price = 81000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 495,
                            SKU = "SP-TCVN-00018",
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dứa Việt Nam",
                            Price = 57000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 322,
                            SKU = "SP-TCVN-00019",
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Dừa xiêm Bến Tre",
                            Price = 20000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 759,
                            SKU = "SP-TCVN-00020",
                            Status = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng chín Đà Lạt",
                            Price = 86000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 42,
                            SKU = "SP-TCVN-00021",
                            Status = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng giòn Đà Lạt",
                            Price = 34000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 728,
                            SKU = "SP-TCVN-00022",
                            Status = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng xiêm Tiền Giang",
                            Price = 42000.0,
                            ProductCategoryId = 1,
                            PurchasePrice = 20000.0,
                            Quantity = 420,
                            SKU = "SP-TCVN-00023",
                            Status = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cherry New Zealand Gift Box 2kg",
                            Price = 1600000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 369,
                            SKU = "SP-TCNK-00024",
                            Status = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Kiwi ruột đỏ NewZealand",
                            Price = 66000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 969,
                            SKU = "SP-TCNK-00025",
                            Status = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Kiwi Vàng New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 818,
                            SKU = "SP-TCNK-00026",
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Kiwi Xanh New Zealand",
                            Price = 135000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 655,
                            SKU = "SP-TCNK-00027",
                            Status = 1
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Breeze NewZealand",
                            Price = 83000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 852,
                            SKU = "SP-TCNK-00028",
                            Status = 1
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Envy New Zealand",
                            Price = 235000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 509,
                            SKU = "SP-TCNK-00029",
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Jazz New Zealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 904,
                            SKU = "SP-TCNK-00030",
                            Status = 1
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Kiku (Size lớn) - Táo Newzealand",
                            Price = 119000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 29,
                            SKU = "SP-TCNK-00031",
                            Status = 1
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Rockit Newzealand",
                            Price = 155000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 306,
                            SKU = "SP-TCNK-00032",
                            Status = 1
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo Royal Gala Newzealand",
                            Price = 99000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 976,
                            SKU = "SP-TCNK-00033",
                            Status = 1
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Táo xanh Newzealand",
                            Price = 110000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 726,
                            SKU = "SP-TCNK-00034",
                            Status = 1
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Chanh vàng Sunkist Mỹ",
                            Price = 51250.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 998,
                            SKU = "SP-TCNK-00035",
                            Status = 1
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cherry đỏ Canada",
                            Price = 519000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 675,
                            SKU = "SP-TCNK-00036",
                            Status = 1
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Cherry Đỏ Mỹ",
                            Price = 490000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 389,
                            SKU = "SP-TCNK-00037",
                            Status = 1
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Hồng giòn Mỹ",
                            Price = 409000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 813,
                            SKU = "SP-TCNK-00038",
                            Status = 1
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Lựu Mỹ",
                            Price = 399000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 885,
                            SKU = "SP-TCNK-00039",
                            Status = 1
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận đen Mỹ",
                            Price = 410000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 672,
                            SKU = "SP-TCNK-00040",
                            Status = 1
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận đỏ Red Plum Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 485,
                            SKU = "SP-TCNK-00041",
                            Status = 1
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long (tím) Mỹ",
                            Price = 46000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 802,
                            SKU = "SP-TCNK-00042",
                            Status = 1
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long (xanh) Mỹ",
                            Price = 420000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 764,
                            SKU = "SP-TCNK-00043",
                            Status = 1
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long đen Mỹ",
                            Price = 109000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 439,
                            SKU = "SP-TCNK-00044",
                            Status = 1
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long đỏ Mỹ",
                            Price = 94000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 21,
                            SKU = "SP-TCNK-00045",
                            Status = 1
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultUnit = "Kg",
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxQuantity = 1000,
                            MinQuantity = 0,
                            Name = "Mận khủng long Farmily Tree Mỹ",
                            Price = 32000.0,
                            ProductCategoryId = 2,
                            PurchasePrice = 20000.0,
                            Quantity = 819,
                            SKU = "SP-TCNK-00046",
                            Status = 1
                        });
                });

            modelBuilder.Entity("api.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây Việt Nam"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Trái cây nhập khẩu"
                        });
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("RatioFromDefault")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUnit");
                });

            modelBuilder.Entity("api.Entities.PurchaseProposalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PurchaseProposalForms");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Common.Enums.PurchaseProposalDetail", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Entities.PurchaseProposalForm", "PurchaseProposalForm")
                        .WithMany("PurchaseProposalDetails")
                        .HasForeignKey("PurchaseProposalFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.Product", b =>
                {
                    b.HasOne("api.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Entities.ProductUnit", b =>
                {
                    b.HasOne("api.Entities.Product", "Product")
                        .WithMany("ProductUnits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
